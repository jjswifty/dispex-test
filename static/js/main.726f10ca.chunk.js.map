{"version":3,"sources":["services/BaseService.js","modules/Constants.js","modules/HttpClient.js","services/ManagementCompanyService.js","services/ClientService.js","services/ApartmentsService.js","store/reducers/apartments-reducer.js","store/reducers/companies-reducer.js","components/CompanyPage/Apartments/Apartment/Clients/Client/Client.jsx","components/CompanyPage/Apartments/Apartment/Clients/Clients.jsx","components/CompanyPage/Apartments/Apartment/Apartment.jsx","components/CompanyPage/Apartments/Apartments.jsx","components/CompanyPage/Houses/House/House.jsx","components/CompanyPage/Houses/Houses.jsx","components/CompanyPage/Streets/Street.jsx/Street.jsx","components/CompanyPage/Streets/Streets.jsx","components/CompanyPage/CompanyPage.jsx","components/CompanySelect/CompanySelect.jsx","components/App.js","reportWebVitals.js","store/index.js","index.js"],"names":["BaseService","httpClient","this","instance","interceptors","request","use","config","headers","process","error","Promise","reject","Config","HttpClient","baseURL","axios","create","getManagementCompanies","params","a","get","data","getStreets","getClients","addClient","post","deleteClient","delete","getApartments","SET_STREETS","SET_APARTMENTS","SET_APARTMENTS_FETCHING","SET_STREETS_FETCHING","SET_IS_STREETS_FETCHED","initialState","streets","isApartmentsFetching","isStreetsFetching","apartments","isStreetsFetched","setStreetsFetching","boolean","type","setApartmentsFetching","setStreets","setApartments","apartmentsReducer","state","action","SET_COMPANIES","SET_SELECTED_COMPANY","SET_SELECTED_COMPANY_NAME","SET_IS_COMPANY_SELECTED","TOGGLE_FETCHING","companies","selectedCompany","selectedCompanyName","isCompanySelected","isFetching","toggleFetching","setCompanies","setIsCompanySelected","setChosenCompany","companyId","companyName","dispatch","Number","companiesReducer","useStyles","makeStyles","root","listStyleType","card","width","height","display","flexDirection","textAlign","margin","alignItems","justifyContent","btn","fontSize","marginTop","Client","props","classes","useState","clientDeleted","setClientDeleted","handleDelete","clientService","client","bindId","className","Card","CardContent","Typography","variant","name","phone","Button","onClick","color","clients","flexWrap","input","Clients","addedClients","setName","setPhone","console","log","push","id","apartment","length","map","index","inputs","TextField","value","onInput","e","target","placeholder","onKeyPress","event","test","key","preventDefault","String","disabled","Apartment","isOpened","setIsOpened","size","style","addressId","Apartments","House","houseNumber","streetHouses","Object","values","Houses","streetHousesKeys","button","Street","street","keys","houses","isStreetOpened","setStreetOpened","Streets","maxWidth","paddingLeft","CompanyPage","useDispatch","selectedCompanyId","useSelector","useEffect","managementCompanyService","Error","apartmentsService","forEach","apartmentsOnThisStreet","filter","streetId","housesWithApartments","houseId","padding","minHeight","formControl","minWidth","CompanySelect","companiesList","FormControl","InputLabel","Select","onChange","optionHandler","defaultValue","MenuItem","theme","createTheme","palette","typography","allVariants","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","ReduxThunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.726f10ca.chunk.js","sourcesContent":["class BaseService {\r\n    constructor (httpClient) {\r\n        this.instance = httpClient.instance\r\n\r\n        this.instance.interceptors.request.use(config => {\r\n            const token = process.env.REACT_APP_API_TOKEN\r\n            config.headers[\"Authorization\"] = `Bearer ${token}`\r\n\r\n            return config\r\n        },\r\n        error => {\r\n            Promise.reject(error);\r\n        })\r\n    }\r\n}\r\n\r\nexport default BaseService","export const Config = {\r\n    API_URL: process.env.REACT_APP_API_URL,\r\n} ","import axios from \"axios\";\r\n\r\nexport default class HttpClient {\r\n    constructor(baseURL) {\r\n        this.instance = axios.create({\r\n            baseURL,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n        });\r\n    }\r\n}\r\n","import { HttpClient } from \"../modules\";\r\nimport { Config } from \"../modules/Constants\";\r\nimport BaseService from \"./BaseService\";\r\n\r\nclass ManagementCompanyService extends BaseService {\r\n    getManagementCompanies = async (params) => {\r\n        const { data } = await this.instance.get('/Request/companies', {\r\n            params,\r\n        })\r\n\r\n        return data\r\n    }\r\n\r\n    getStreets = async (params) => {\r\n        const { data } = await this.instance.get('/Request/streets', {\r\n            params,\r\n        })\r\n        \r\n        return data\r\n    }\r\n}\r\n\r\nexport default new ManagementCompanyService(new HttpClient(Config.API_URL))","import { HttpClient } from \"../modules\";\r\nimport { Config } from \"../modules/Constants\";\r\nimport BaseService from \"./BaseService\";\r\n\r\nclass ClientService extends BaseService {\r\n    getClients = async (params) => {\r\n        const { data } = await this.instance.get('/HousingStock/client', {\r\n            params,\r\n        })\r\n\r\n        return data\r\n    }\r\n\r\n    addClient = async (params) => {\r\n        const { data } = await this.instance.post('/HousingStock/client', {\r\n            params,\r\n        })\r\n\r\n        return data\r\n    }\r\n\r\n    deleteClient = async (params) => {\r\n        const { data } = await this.instance.delete(`/HousingStock/bind_client/${params}`)\r\n\r\n        return data\r\n    }\r\n}\r\n\r\nexport default new ClientService(new HttpClient(Config.API_URL))","import { HttpClient } from \"../modules\";\r\nimport { Config } from \"../modules/Constants\";\r\nimport BaseService from \"./BaseService\";\r\n\r\nclass ApartmentsService extends BaseService {\r\n    getApartments = async (params) => {\r\n        const { data } = await this.instance.get('/HousingStock', {\r\n            params,\r\n        })\r\n        \r\n        return data\r\n    }\r\n}\r\n\r\nexport default new ApartmentsService(new HttpClient(Config.API_URL))","import { managementCompanyService, apartmentsService } from \"../../services\"\r\n\r\nconst SET_STREETS = 'GET_COMPANIES'\r\nconst SET_APARTMENTS = 'SET_APARTMENTS'\r\nconst SET_APARTMENTS_FETCHING = 'SET_APARTMENTS_FETCHING'\r\nconst SET_STREETS_FETCHING = 'SET_STREETS_FETCHING'\r\nconst SET_IS_STREETS_FETCHED = 'SET_IS_STREETS_FETCHED'\r\n\r\nlet initialState = {\r\n    streets: [],\r\n    isApartmentsFetching: false,\r\n    isStreetsFetching: false,\r\n    apartments: [],\r\n    isStreetsFetched: false,\r\n}\r\n\r\nconst apartmentsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case SET_STREETS:\r\n            return {\r\n                ...state,\r\n                streets: action.streets\r\n            }\r\n\r\n        case SET_APARTMENTS: \r\n            return {\r\n                ...state,\r\n                apartments: action.apartments\r\n            }\r\n\r\n        case SET_APARTMENTS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isApartmentsFetching: action.boolean\r\n            }\r\n\r\n        case SET_STREETS_FETCHING:\r\n            return {\r\n                ...state,\r\n                isStreetsFetching: action.boolean\r\n            }\r\n\r\n        case SET_IS_STREETS_FETCHED:\r\n            return {\r\n                ...state,\r\n                isStreetsFetched: action.boolean\r\n            }\r\n\r\n        default:\r\n            return state\r\n    } \r\n}\r\n\r\nconst setStreetsFetching = boolean => ({type: SET_STREETS_FETCHING, boolean})\r\nconst setApartmentsFetching = boolean => ({type: SET_APARTMENTS_FETCHING, boolean})\r\nexport const setStreets = streets => ({type: SET_STREETS, streets})\r\nexport const setIsStreetsFetched = boolean => ({type: SET_IS_STREETS_FETCHED, boolean})\r\nexport const setApartments = apartments => ({type: SET_APARTMENTS, apartments})\r\n\r\nexport const setListOfStreets = () => async dispatch => {\r\n    dispatch(setStreetsFetching(true))\r\n    try {\r\n        const streets = await managementCompanyService.getStreets()\r\n        \r\n        dispatch(setStreets(streets))\r\n        dispatch(setIsStreetsFetched(true))\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    } finally {\r\n        dispatch(setStreetsFetching(false))        \r\n    }\r\n}\r\n\r\nexport const setListOfApartments = companyId => async dispatch => {\r\n    dispatch(setApartmentsFetching(true))\r\n    try {\r\n        const apartments = await apartmentsService.getApartments({\r\n            companyId,\r\n        })\r\n        \r\n        dispatch(setApartments(apartments))\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    } finally {\r\n        dispatch(setApartmentsFetching(false))        \r\n    }\r\n}\r\n\r\nexport default apartmentsReducer","import { managementCompanyService } from './../../services'\r\n\r\nconst SET_COMPANIES = 'SET_COMPANIES'\r\nconst SET_SELECTED_COMPANY = 'SET_SELECTED_COMPANY'\r\nconst SET_SELECTED_COMPANY_NAME = 'SET_SELECTED_COMPANY_NAME'\r\nconst SET_IS_COMPANY_SELECTED = 'SET_IS_COMPANY_SELECTED'\r\nconst TOGGLE_FETCHING = 'TOGGLE_FETCHING'\r\n\r\nlet initialState = {\r\n    companies: [],\r\n    selectedCompany: null,\r\n    selectedCompanyName: '',\r\n    isCompanySelected: false,\r\n    isFetching: false,\r\n}\r\n\r\nconst companiesReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_COMPANIES:\r\n            return {\r\n                ...state,\r\n                companies: action.companies\r\n            }\r\n\r\n        case SET_SELECTED_COMPANY:\r\n            return {\r\n                ...state,\r\n                selectedCompany: action.selectedCompany\r\n            }\r\n\r\n        case SET_SELECTED_COMPANY_NAME:\r\n            return {\r\n                ...state,\r\n                selectedCompanyName: action.selectedCompanyName\r\n            }\r\n\r\n        case SET_IS_COMPANY_SELECTED:\r\n            return {\r\n                ...state,\r\n                isCompanySelected: action.isCompanySelected\r\n            }\r\n\r\n        case TOGGLE_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: !state.isFetching\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst toggleFetching = () => ({type: TOGGLE_FETCHING})\r\nexport const setCompanies = companies => ({type: SET_COMPANIES, companies})\r\nexport const setSelectedCompany = selectedCompany => ({type: SET_SELECTED_COMPANY, selectedCompany})\r\nexport const setCompanyName = selectedCompanyName => ({type: SET_SELECTED_COMPANY_NAME, selectedCompanyName}) \r\nexport const setIsCompanySelected = isCompanySelected => ({type: SET_IS_COMPANY_SELECTED, isCompanySelected})\r\n\r\nexport const setCompaniesList = () => async (dispatch) => {\r\n    dispatch(toggleFetching())\r\n    try {\r\n        const companies = await managementCompanyService.getManagementCompanies()\r\n        \r\n        dispatch(setCompanies(companies))\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    } finally {\r\n        dispatch(toggleFetching())\r\n    }\r\n}\r\n\r\nexport const setChosenCompany = (companyId, companyName) => dispatch => {\r\n    dispatch(setSelectedCompany(Number(companyId)))\r\n    dispatch(setCompanyName(companyName))\r\n    dispatch(setIsCompanySelected(true))\r\n}\r\n\r\nexport default companiesReducer ","import { Button, Card, CardContent, makeStyles, Typography } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { clientService } from \"../../../../../../services\"\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        listStyleType: 'none'\r\n    },\r\n    card: {\r\n        width: 250,\r\n        height: 130,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        textAlign: 'center',\r\n        margin: 2,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n\r\n    },\r\n    btn: {\r\n        width: '90%',\r\n        fontSize: 12,\r\n        marginTop: 5\r\n    }\r\n})\r\n\r\nexport const Client = props => {\r\n    const classes = useStyles()\r\n    const [clientDeleted, setClientDeleted] = useState(false)\r\n    const handleDelete = async () => {\r\n        await clientService.deleteClient(props.client.bindId)\r\n        setClientDeleted(true)\r\n    }\r\n    return (\r\n        clientDeleted ? null : <li className={classes.root}>\r\n            {\r\n                //<div className={classes.card}>\r\n                //    <Typography variant=\"inherit\">{`Жилец ${props.client.name},`}</Typography>\r\n                //    <Typography variant=\"inherit\">{`телефон ${props.client.phone}`}</Typography>\r\n                //    <Button className={classes.btn} onClick={handleDelete} color=\"secondary\" variant=\"contained\">Удалить жильца</Button>\r\n                //</div>\r\n            }\r\n            <Card className={classes.card}>\r\n                <CardContent>\r\n                    <Typography variant=\"inherit\">{`Жилец ${props.client.name},`}</Typography>\r\n                    <Typography variant=\"inherit\">{`телефон ${props.client.phone}`}</Typography>\r\n                    <Button className={classes.btn} onClick={handleDelete} color=\"secondary\" variant=\"contained\">Удалить жильца</Button>\r\n                </CardContent>\r\n            </Card>\r\n        </li>\r\n    )\r\n}","import { Client } from \"./Client/Client\"\r\nimport { Button, makeStyles, TextField, Typography } from \"@material-ui/core\"\r\nimport { clientService } from \"../../../../../services\"\r\nimport { useState } from \"react\"\r\n\r\nconst useStyles = makeStyles({\r\n    clients: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap'\r\n    },\r\n    btn: {\r\n        fontSize: 12,\r\n        margin: 5\r\n    },\r\n    input: {\r\n        width: 140,\r\n        margin: 5\r\n    },\r\n\r\n})\r\nexport const Clients = props => {\r\n    const classes = useStyles()\r\n    const addedClients = []\r\n\r\n    const [name, setName] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n\r\n    const addClient = async () => {\r\n        console.log(name, phone)\r\n        const client = await clientService.addClient({\r\n            name,\r\n            phone\r\n        })\r\n        addedClients.push({\r\n            bindId: client.id,\r\n            name,\r\n            phone,\r\n        })\r\n    }\r\n\r\n    return ( \r\n        <ul>\r\n            <div >\r\n                <Typography>Жильцы</Typography>\r\n                <div className={classes.clients}>\r\n                    {\r\n                        props.apartment.clients.length > 0 && props.apartment.clients.map((client, index) => {\r\n                            return <div key={client.bindId}>\r\n                                {\r\n                                    //addedClients.length > 0 && addedClients.map(client => {\r\n                                    //    return <Client client={client} apartment={props.apartment} key={client.bindId}/>\r\n                                    //})\r\n                                    <Client client={client} apartment={props.apartment}/>\r\n                                }\r\n                            </div>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={classes.inputs}>\r\n                <TextField className={classes.input} value={name} onInput={e => setName(e.target.value)} placeholder=\"имя\"/>\r\n                <TextField className={classes.input} onKeyPress={(event) => {\r\n                        if (!/[0-9]/.test(event.key)) {\r\n                            event.preventDefault();\r\n                        }}\r\n                    } \r\n                    value={phone} \r\n                    onInput={e => setPhone(String(e.target.value))} \r\n                    placeholder=\"телефон\"/>\r\n                <Button onClick={addClient} disabled={!name || !phone} className={classes.btn}>Добавить жильца</Button>\r\n            </div>\r\n        </ul>\r\n    )\r\n}","import { Button } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { Clients } from \"./Clients/Clients\"\r\n\r\nexport const Apartment = props => {\r\n\r\n    const [isOpened, setIsOpened] = useState(false)\r\n    const handleOpen = () => {\r\n        setIsOpened(!isOpened)\r\n    }\r\n\r\n    return (\r\n        <ul>\r\n            <Button size=\"small\" variant=\"outlined\" style={{margin: '2px'}} onClick={handleOpen}>Квартира с ID {props.apartment.addressId}</Button>\r\n            {isOpened && <Clients apartment={props.apartment}/>}\r\n        </ul>\r\n    )\r\n}","import { Apartment } from \"./Apartment/Apartment\"\r\n\r\nexport const Apartments = props => {\r\n    console.log(props.apartments)\r\n\r\n    return props.apartments.map(apartment => {\r\n\r\n        return <Apartment apartment={apartment} key={apartment.addressId}/>\r\n    })\r\n}","import { Button } from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport { Apartments } from \"../../Apartments/Apartments\"\r\n\r\nexport const House = props => {\r\n\r\n    const [isOpened, setIsOpened] = useState(false)\r\n    const handleOpen = () => {\r\n        setIsOpened(!isOpened)\r\n    }\r\n    \r\n    return <li>\r\n        <Button size=\"medium\" variant=\"outlined\" onClick={handleOpen} style={{margin: '2px'}}>Дом {props.houseNumber}</Button>\r\n        {\r\n            isOpened && props.streetHouses.map((apartments, index) => {\r\n                return <Apartments apartments={Object.values(apartments)} key={index}/>\r\n            })\r\n        }\r\n    </li>\r\n}","import { House } from \"./House/House\"\r\n\r\nexport const Houses = props => {\r\n    return props.streetHousesKeys.map(houseNumber => <House key={houseNumber} houseNumber={houseNumber} streetHouses={props.streetHouses}/>)\r\n}","import {Button, makeStyles} from \"@material-ui/core\"\r\nimport { useState } from \"react\"\r\nimport {Houses} from \"../../Houses/Houses\"\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        margin: 3\r\n    }\r\n})\r\nexport const Street = props => {\r\n    const classes = useStyles()\r\n    const street = props.street\r\n    const streetHousesKeys = Object.keys(street.houses)\r\n\r\n    const [isStreetOpened, setStreetOpened] = useState(false)\r\n\r\n    const openButtonHandler = () => {\r\n        setStreetOpened(!isStreetOpened)\r\n    }\r\n    return (streetHousesKeys.length !== 0 && <div key={street.id}>\r\n        <Button variant=\"outlined\" className={classes.button} onClick={openButtonHandler}>\r\n            {street.name}\r\n        </Button>\r\n        <div>\r\n            { \r\n                isStreetOpened && <div>\r\n                    <ul>\r\n                        <Houses streetHousesKeys={streetHousesKeys} streetHouses={Object.values(street.houses)}/>\r\n                    </ul>\r\n                </div>\r\n            }\r\n        </div>\r\n    </div>)\r\n}","import { Street } from \"./Street.jsx/Street\"\r\n\r\nexport const Streets = props => {\r\n    const streets = props.streets\r\n    return streets && streets.map(street => {\r\n        return <Street street={street} key={street.id}/>\r\n    })\r\n}","import {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setListOfApartments, setListOfStreets} from '../../store/reducers/apartments-reducer';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Button, Typography} from '@material-ui/core';\r\nimport {setIsCompanySelected} from '../../store/reducers/companies-reducer';\r\nimport { Streets } from './Streets/Streets';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: '100%',\r\n        maxWidth: '100%',\r\n        paddingLeft: 10\r\n    },\r\n})\r\n\r\nexport const CompanyPage = props => {\r\n    // вообще компоненты нужно хорошо, даже очень хорошо зарефакторить, \r\n    // но основная масса писалась ночью, так что и код соответствующий\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const selectedCompanyId = props.selectedCompany\r\n    const isStreetsFetching = useSelector(state => state.apartmentsReducer.isStreetsFetching)\r\n    const isStreetsFetched = useSelector(state => state.apartmentsReducer.isStreetsFetched)\r\n    const isApartmentsFetching = useSelector(state => state.apartmentsReducer.isApartmentsFetching)\r\n    const apartments = useSelector(state => state.apartmentsReducer.apartments)\r\n    const streets = useSelector(state => state.apartmentsReducer.streets)\r\n    const selectedCompanyName = useSelector(state => state.companiesReducer.selectedCompanyName)\r\n\r\n    useEffect(() => {\r\n        if (!isStreetsFetched) {\r\n            dispatch(setListOfStreets())\r\n        }\r\n        dispatch(setListOfApartments(selectedCompanyId))\r\n    }, [])\r\n\r\n    if (streets) {\r\n        streets.forEach(street => { // Перебирая все улицы,\r\n            const apartmentsOnThisStreet = apartments.filter(apartment => (apartment.streetId === street.id)) // получаем квартиры, находящиеся на итерируемой улице.\r\n            const housesWithApartments = {} // Создаем объект в котором будут храниться дома с квартирами (номер дома: { квартира, квартира, ... })\r\n            apartmentsOnThisStreet.forEach(apartment => { // Перебирая все квартиры,\r\n                housesWithApartments[apartment.houseId] = {\r\n                    ...housesWithApartments[apartment.houseId],\r\n                    [apartment.addressId]: apartment\r\n                } // создаем дом, добавляем в него итерируемую квартиру / добавляем квартиру в уже существующий дом.\r\n            })\r\n            street['houses'] = housesWithApartments // И наконец добавляем дома на улицу.\r\n        })\r\n    }\r\n    const handleBackButton = () => dispatch(setIsCompanySelected(false))\r\n    const isFetching = (isApartmentsFetching || isStreetsFetching)\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleBackButton} disabled={isFetching}>\r\n                Назад к выбору\r\n            </Button>\r\n            <Typography variant=\"subtitle1\">Управляющая компания {selectedCompanyName}</Typography>\r\n            <Typography variant=\"subtitle2\">{selectedCompanyName} имеет дома на данных улицах: (сделано что-бы не показывало все улицы, много пустых)</Typography>\r\n            {isFetching ? <Typography variant=\"subtitle1\">ЗАГРУЗКА...</Typography> : <Streets streets={streets}/>}\r\n        </div>\r\n    )\r\n}","import {useEffect} from \"react\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {setCompaniesList, setChosenCompany} from \"../../store/reducers/companies-reducer\"\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {FormControl} from \"@material-ui/core\";\r\nimport {InputLabel} from \"@material-ui/core\";\r\nimport {Select} from \"@material-ui/core\";\r\nimport {MenuItem} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: 0,\r\n        padding: 0,\r\n        width: '100%',\r\n        minHeight: '100vh',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n})\r\n\r\nexport const CompanySelect = props => {\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n\r\n    const companiesList = useSelector(state => state.companiesReducer.companies)\r\n\r\n    useEffect(() => {\r\n        dispatch(setCompaniesList())\r\n    }, [])\r\n\r\n    const optionHandler = ({ id, name }) => {\r\n        dispatch(setChosenCompany(id, name))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel>Управляющая компания</InputLabel>\r\n                <Select onChange={e => optionHandler(e.target.value)} defaultValue=\"\">\r\n                    {\r\n                        companiesList && companiesList.map(e => <MenuItem \r\n                            value={{id: e.id, name: e.name}} \r\n                            key={e.id}\r\n                            >\r\n                                {e.name}\r\n                        </MenuItem>)\r\n                    }\r\n                </Select>\r\n            </FormControl>\r\n\r\n        </div>\r\n    )\r\n}","import {useSelector} from \"react-redux\"\nimport {CompanyPage} from \"./CompanyPage/CompanyPage\"\nimport {CompanySelect} from \"./CompanySelect/CompanySelect\"\nimport {makeStyles, ThemeProvider, createTheme} from '@material-ui/core/styles';\nimport { CssBaseline } from \"@material-ui/core\";\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    typography: {\n        allVariants: {\n            color: \"white\"\n        },\n    },\n});\n\nconst useStyles = makeStyles({\n    root: {\n        margin: 0,\n        padding: 0,\n        width: '100%',\n        minHeight: '100vh'\n    }\n})\n\nexport const App = () => {\n\n    const classes = useStyles()\n\n    const isCompanySelected = useSelector(state => state.companiesReducer.isCompanySelected)\n    const selectedCompany = useSelector(state => state.companiesReducer.selectedCompany)\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className={classes.root}>\n                {\n                    isCompanySelected\n                    ? <CompanyPage selectedCompany={selectedCompany}/>\n                    : <CompanySelect/>\n                }\n            </div>\n        </ThemeProvider>\n\n    )\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import ('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","import { createStore, combineReducers, applyMiddleware } from \"redux\"\r\nimport ReduxThunk from 'redux-thunk'\r\nimport { apartmentsReducer, companiesReducer } from \"./reducers\"\r\n\r\nconst reducers = combineReducers({\r\n    apartmentsReducer,\r\n    companiesReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(ReduxThunk))\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n</React.StrictMode>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function to\n// log results (for example: reportWebVitals(console.log)) or send to an\n// analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}